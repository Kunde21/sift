package main

import (
	"runtime"
	"testing"
)

var rnd []byte

func init() {
	rnd = []byte{124, 213, 29, 250, 153, 101, 36, 30, 189, 28, 149, 252, 151, 152, 184, 227, 27, 10, 201, 110, 121, 215, 232, 184, 2, 172, 56, 189, 156, 230, 202, 211, 246, 96, 240, 116, 220, 132, 231, 216, 84, 49, 176, 183, 238, 202, 229, 103, 66, 60, 255, 159, 104, 253, 50, 193, 20, 80, 146, 227, 200, 86, 250, 40, 166, 91, 191, 213, 206, 136, 229, 150, 127, 68, 246, 133, 209, 111, 85, 53, 19, 233, 62, 141, 115, 120, 210, 178, 82, 179, 57, 37, 169, 233, 87, 35, 53, 217, 150, 40, 241, 15, 26, 119, 238, 202, 127, 65, 101, 163, 141, 47, 36, 18, 68, 61, 108, 159, 2, 16, 198, 68, 47, 202, 236, 143, 29, 165, 241, 67, 89, 131, 44, 194, 97, 192, 161, 125, 106, 22, 195, 247, 222, 219, 251, 177, 126, 209, 149, 25, 168, 198, 223, 113, 16, 146, 88, 159, 147, 110, 244, 63, 78, 76, 235, 53, 53, 101, 32, 152, 196, 5, 17, 108, 44, 117, 167, 20, 78, 158, 186, 67, 50, 124, 10, 21, 169, 209, 103, 245, 157, 12, 177, 173, 34, 255, 201, 153, 165, 122, 2, 219, 87, 140, 173, 42, 26, 254, 200, 22, 64, 166, 211, 32, 144, 250, 247, 166, 87, 144, 223, 150, 6, 197, 92, 125, 117, 172, 229, 65, 171, 166, 85, 248, 248, 224, 190, 74, 56, 239, 252, 47, 69, 142, 186, 7, 61, 68, 211, 70, 108, 225, 38, 150, 175, 180, 63, 2, 212, 12, 114, 106, 76, 33, 158, 67, 204, 20, 137, 79, 210, 201, 147, 181, 149, 16, 91, 173, 197, 242, 57, 154, 230, 49, 101, 100, 5, 249, 199, 80, 98, 88, 168, 201, 244, 33, 102, 59, 182, 158, 118, 184, 238, 166, 42, 156, 220, 121, 218, 170, 76, 70, 32, 173, 142, 100, 138, 187, 124, 11, 54, 218, 146, 151, 113, 240, 127, 100, 36, 21, 245, 119, 96, 145, 145, 105, 224, 3, 251, 244, 56, 31, 170, 96, 60, 131, 229, 21, 166, 132, 37, 214, 168, 13, 108, 137, 235, 180, 148, 171, 104, 41, 228, 153, 184, 169, 29, 130, 108, 61, 82, 203, 26, 137, 213, 67, 164, 247, 7, 92, 212, 6, 240, 159, 67, 14, 178, 3, 42, 137, 12, 173, 59, 5, 172, 165, 227, 23, 204, 43, 97, 95, 226, 142, 72, 131, 68, 114, 78, 188, 230, 134, 114, 192, 53, 88, 1, 62, 179, 51, 248, 138, 43, 167, 210, 49, 71, 110, 60, 215, 207, 175, 186, 155, 13, 225, 74, 82, 94, 124, 107, 137, 66, 142, 248, 101, 241, 170, 8, 174, 69, 131, 246, 69, 65, 155, 231, 245, 146, 29, 54, 68, 251, 141, 218, 187, 9, 135, 125, 71, 31, 74, 14, 22, 53, 176, 32, 117, 144, 30, 94, 206, 226, 18, 49, 92, 138, 166, 128, 207, 121, 243, 231, 172, 87, 62, 210, 160, 0, 83, 91, 0, 229, 15, 92, 146, 39, 39, 83, 222, 192, 205, 174, 64, 83, 40, 187, 216, 86, 130, 137, 134, 213, 84, 59, 243, 92, 127, 143, 217, 115, 75, 164, 153, 154, 22, 66, 159, 27, 206, 20, 105, 12, 54, 101, 234, 222, 129, 22, 63, 243, 228, 89, 165, 188, 109, 204, 128, 4, 4, 136, 243, 99, 122, 68, 248, 5, 160, 23, 134, 83, 35, 235, 5, 17, 214, 220, 63, 183, 215, 134, 106, 42, 204, 229, 151, 86, 216, 137, 239, 187, 94, 210, 107, 36, 234, 42, 70, 230, 175, 89, 100, 156, 4, 226, 70, 100, 161, 223, 145, 158, 110, 62, 195, 107, 168, 17, 127, 79, 84, 15, 238, 85, 153, 184, 87, 183, 250, 225, 65, 57, 191, 94, 77, 218, 123, 199, 200, 67, 113, 75, 127, 159, 153, 134, 253, 184, 219, 150, 212, 209, 57, 82, 165, 201, 142, 122, 228, 249, 139, 155, 222, 119, 112, 88, 82, 191, 46, 150, 213, 158, 9, 255, 127, 146, 137, 226, 74, 25, 216, 246, 214, 110, 14, 113, 233, 104, 135, 251, 182, 249, 0, 166, 224, 159, 72, 88, 153, 159, 22, 215, 25, 22, 214, 175, 104, 41, 217, 111, 65, 226, 230, 157, 64, 75, 33, 91, 95, 22, 116, 120, 99, 63, 167, 25, 62, 198, 251, 165, 132, 108, 11, 19, 160, 192, 197, 130, 68, 155, 251, 153, 66, 249, 225, 234, 229, 148, 236, 229, 143, 36, 137, 192, 13, 76, 147, 69, 183, 250, 110, 69, 39, 252, 100, 72, 19, 255, 215, 231, 66, 15, 66, 124, 79, 246, 5, 172, 82, 166, 28, 51, 123, 38, 227, 154, 131, 185, 23, 185, 208, 253, 23, 99, 49, 58, 241, 87, 132, 215, 64, 226, 194, 58, 23, 224, 230, 39, 34, 185, 107, 132, 91, 101, 171, 92, 254, 19, 171, 76, 32, 234, 73, 241, 241, 84, 136, 82, 119, 161, 67, 31, 234, 240, 17, 243, 153, 187, 218, 72, 249, 47, 140, 169, 108, 88, 198, 252, 89, 104, 151, 26, 53, 146, 149, 38, 82, 157, 106, 156, 19, 69, 128, 179, 94, 136, 83, 207, 55, 80, 202, 34, 176, 137, 133, 94, 229, 192, 84, 46, 110, 24, 16, 124, 108, 184, 118, 139, 159, 2, 172, 160, 243, 128, 13, 99, 58, 22, 20, 74, 109, 84, 44, 216, 167, 164, 52, 202, 145, 4, 38, 133, 246, 146, 102, 72, 213, 163, 154, 74, 94, 57, 96, 192, 155, 243, 199, 106, 242, 250, 35, 155, 172, 81, 44, 25, 195, 134, 177, 237, 69, 144, 240, 36, 194, 176, 245, 120, 178, 96, 44, 58, 168, 185, 7, 25, 174, 182, 180, 158, 194, 114, 27, 184, 98, 148, 226, 58, 139, 91, 87, 248, 99, 109, 127, 216, 86, 206, 37, 36, 229, 121, 151, 93, 59, 226, 145, 121, 140, 210, 23, 30, 12, 43, 85, 132, 50, 242, 226, 48, 14, 187, 41, 38, 10, 215, 83, 188, 110, 229, 182, 166, 243, 83, 194, 170, 174, 52, 118, 79, 114, 190, 118, 219, 70, 182, 166, 243, 83, 194, 170, 174, 52, 118, 79, 114, 190, 118, 219, 70}
}

func checkNewlines(input []byte, length int) int {
	var count int
	for i := 0; i < length; i++ {
		if input[i] == 0xa {
			count++
		}
	}
	return count
}

func TestCountNewLines(t *testing.T) {
	if c, st := countNewlines(rnd, len(rnd)), checkNewlines(rnd, len(rnd)); c != st {
		t.Log("ASM failed:", c, "vs", st)
		t.Fail()
	}
}

func checkBytesToLower(buf, out []byte, len int) {
	var tst uint8 = 65
	for i := range buf {
		if uint8(buf[i])-tst < 26 {
			out[i] = buf[i] + 32
		} else {
			out[i] = buf[i]
		}
	}
}

func TestBytesToLower(t *testing.T) {
	b, c := make([]byte, len(rnd)), make([]byte, len(rnd))
	checkBytesToLower(rnd, b, len(rnd))
	bytesToLower(rnd, c, len(rnd))
	for i, v := range b {
		if v != c[i] {
			t.Log("Error at", i, "Compiled:", v, "Asm:", c[i])
			t.Fail()
		}
	}
	a, b, c := rnd[:8], make([]byte, 8), make([]byte, 32)
	checkBytesToLower(a, b, len(a))
	bytesToLower(a, c, len(a))
	for i, v := range b {
		if v != c[i] {
			t.Log("Error at", i, "Compiled:", v, "Asm:", c[i])
			t.Fail()
		}
	}
	runtime.GC()
}

func BenchmarkCountNewLines(t *testing.B) {
	for i := 0; i < t.N; i++ {
		countNewlines(rnd, len(rnd))
	}
}

func BenchmarkBytesToLower(t *testing.B) {
	c := make([]byte, len(rnd))

	t.ResetTimer()
	t.ReportAllocs()
	for i := 0; i < t.N; i++ {
		bytesToLower(rnd, c, len(rnd))
	}
	t.StopTimer()
	runtime.GC()
}
